using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;
using EVEMon.Common.Extensions;
using EVEMon.Common.Models;
using EVEMon.Common.Serialization.Eve;

namespace EVEMon.Common.Helpers
{
    public static class KillLogExporter
    {
        /// <summary>
        /// Copies the kill info to clipboard.
        /// </summary>
        public static void CopyKillInfoToClipboard(KillLog killLog)
        {
            try
            {
                string killLogInfoText = ExportKillLogInfo(killLog);
                if (string.IsNullOrEmpty(killLogInfoText))
                {
                    MessageBox.Show(@"No kill info was available. Nothing has been copied to the clipboard.",
                        @"Copy", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                Clipboard.SetText(killLogInfoText, TextDataFormat.Text);
                MessageBox.Show(@"The kill info have been copied to the clipboard.",
                    @"Copy", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (ExternalException ex)
            {
                // Occurs when another process is using the clipboard
                ExceptionHandler.LogException(ex, true);
                MessageBox.Show(@"Couldn't complete the operation, the clipboard is being used by another process. " +
                                @"Wait a few moments and try again.");
            }
        }

        /// <summary>
        /// Exports the kill log info.
        /// </summary>
        /// <returns></returns>
        private static string ExportKillLogInfo(KillLog killLog)
        {
            if (killLog == null)
                return string.Empty;

            StringBuilder sb = new StringBuilder();
            sb
                .AppendLine(killLog.KillTime.DateTimeToDotFormattedString())
                .AppendLine()
                .AppendLine($"Victim: {killLog.Victim.Name}")
                .AppendLine($"Corp: {killLog.Victim.CorporationName}")
                .AppendLine($"Alliance: {killLog.Victim.AllianceName}")
                .AppendLine($"Faction: {killLog.Victim.FactionName}")
                .AppendLine($"Destroyed: {killLog.Victim.ShipTypeName}")
                .AppendLine($"System: {killLog.SolarSystem?.Name}")
                .AppendLine(FormattableString.Invariant($"Security: {killLog.SolarSystem?.SecurityLevel:N1}"))
                .AppendLine(FormattableString.Invariant($"Damage Taken: {killLog.Victim.DamageTaken:N}"));

            sb.AppendLine();
            sb.AppendLine("Involved parties:");
            sb.AppendLine();

            foreach (SerializableKillLogAttackersListItem attacker in killLog.Attackers.OrderByDescending(x => x.DamageDone))
            {
                // Append info for NPC or player entities
                if (string.IsNullOrEmpty(attacker.Name))
                    sb.Append($"Name: {attacker.ShipTypeName} / {attacker.CorporationName}");
                else
                    sb.Append($"Name: {attacker.Name}");

                if (attacker.FinalBlow)
                    sb.Append(" (laid the final blow)");

                sb.AppendLine();

                // Append info only for player entities
                if (!string.IsNullOrEmpty(attacker.Name))
                {
                    sb.AppendLine(FormattableString.Invariant($"Security: {attacker.SecurityStatus:N1}"))
                        .AppendLine($"Corp: {attacker.CorporationName}")
                        .AppendLine($"Alliance: {(attacker.AllianceName.IsEmptyOrUnknown() ? "None" : attacker.AllianceName)}")
                        .AppendLine($"Faction: {(attacker.FactionName.IsEmptyOrUnknown() ? "None" : attacker.FactionName)}")
                        .AppendLine($"Ship: {attacker.ShipTypeName}")
                        .AppendLine($"Weapon: {attacker.WeaponTypeName}");
                }

                sb.AppendLine(FormattableString.Invariant($"Damage Done: {attacker.DamageDone:N}")).AppendLine();
            }

            if (killLog.Items.Any(x => x.QtyDestroyed != 0))
            {
                sb.AppendLine("Destroyed items:");
                sb.AppendLine();
                AppendDestroyedItems(sb, killLog.Items.Where(x => x.QtyDestroyed != 0));
                sb.AppendLine();
            }

            if (killLog.Items.Any(x => x.QtyDropped != 0))
            {
                sb.AppendLine("Dropped items:");
                sb.AppendLine();
                AppendDroppedItems(sb, killLog.Items.Where(x => x.QtyDropped != 0));
                sb.AppendLine();
            }

            sb.AppendLine("<-- Generated by EVEMon -->");

            return sb.ToString();
        }

        /// <summary>
        /// Appends the dropped items.
        /// </summary>
        /// <param name="sb">The sb.</param>
        /// <param name="droppedItems">The dropped items.</param>
        private static void AppendDroppedItems(StringBuilder sb, IEnumerable<KillLogItem> droppedItems)
        {
            foreach (KillLogItem droppedItem in droppedItems.Where(droppedItem => droppedItem.EVEFlag != 0 || droppedItem.IsInContainer))
            {
                if (droppedItem.IsInContainer)
                    sb.Append("   ");

                sb.Append(droppedItem.Name);

                if (droppedItem.QtyDropped > 1)
                    sb.Append(FormattableString.Invariant($", Qty: {droppedItem.QtyDropped:N}"));

                if (!string.IsNullOrEmpty(droppedItem.InventoryText))
                    sb.Append($" ({droppedItem.InventoryText})");

                if (droppedItem.IsInContainer)
                    sb.Append(" (In Container)");

                sb.AppendLine();

                // Append any items inside a container
                if (droppedItem.Items.Any())
                    AppendDroppedItems(sb, droppedItem.Items.Where(x => x.QtyDropped != 0));
            }
        }

        /// <summary>
        /// Appends the destroyed items.
        /// </summary>
        /// <param name="sb">The sb.</param>
        /// <param name="destroyedItems">The destroyed items.</param>
        private static void AppendDestroyedItems(StringBuilder sb, IEnumerable<KillLogItem> destroyedItems)
        {
            foreach (KillLogItem destroyedItem in destroyedItems.Where(destroyedItem => destroyedItem.EVEFlag != 0 || destroyedItem.IsInContainer))
            {
                if (destroyedItem.IsInContainer)
                    sb.Append("   ");

                sb.Append(destroyedItem.Name);

                if (destroyedItem.QtyDestroyed > 1)
                    sb.Append(FormattableString.Invariant($", Qty: {destroyedItem.QtyDestroyed:N}"));

                if (!string.IsNullOrEmpty(destroyedItem.InventoryText))
                    sb.Append($" ({destroyedItem.InventoryText})");

                if (destroyedItem.IsInContainer)
                    sb.Append(" (In Container)");

                sb.AppendLine();

                // Append any items inside a container
                if (destroyedItem.Items.Any())
                    AppendDestroyedItems(sb, destroyedItem.Items.Where(x => x.QtyDestroyed != 0));
            }
        }
    }
}
